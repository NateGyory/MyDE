// Place your key bindings in this file to override the defaults
[
    {
        "key": "ctrl+p",
        "command": "composerMode.agent"
    },
    //
    // VIM NAVIGATION SHORTCUTS
    //
    {
        "key": "space w",
        "command": "workbench.action.files.save",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space q",
        "command": "workbench.action.closeActiveEditor",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },

    {
        "key": "ctrl-h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "ctrl-l",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "ctrl-k",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "ctrl-j",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "space ,",
        "command": "workbench.action.showAllEditors",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)&&!inputFocus"
    },
    {
        "key": "space e",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.toggleSidebarVisibility",
                "workbench.files.action.focusFilesExplorer"
            ]
        },
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && !sideBarFocus&&!inputFocus"
    },
    {
        "key": "space e",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.toggleSidebarVisibility",
                "workbench.action.focusActiveEditorGroup"
            ]
        },
        "when": "sideBarFocus && !inputFocus"
    },
    {
        "key": "space e",
        "when": "vim.mode == 'Normal' && editorTextFocus && foldersViewVisible&&!inputFocus",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    // File Explorer
    {
        "key": "r",
        "command": "renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "d",
        "command": "deleteFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "a",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "s",
        "command": "explorer.openToSide",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift-s",
        "command": "runCommands",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
        "args": {
            "commands": [
                "workbench.action.splitEditorDown",
                "explorer.openAndPassFocus",
                "workbench.action.closeOtherEditors"
            ]
        }
    },
    {
        "key": "enter",
        "command": "explorer.openAndPassFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "enter",
        "command": "list.toggleExpand",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && explorerResourceIsFolder && !inputFocus"
    },
    //{
    //    "key": "s h",
    //    "command": "workbench.action.splitEditor",
    //    "when": "vim.mode == 'Normal' && editorFocus && (editorTextFocus || !inputFocus)"
    //},
    //{
    //    "key": "s v",
    //    "command": "workbench.action.splitEditorDown",
    //    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
    //},
    // CODE NAVIGATION AND EDITING
    //
    {
        // "ctrl+space f": Formats the entire document
        "key": "ctrl+space f",
        "command": "editor.action.formatDocument",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "space c a",
        "command": "editor.action.codeAction",
        "when": "vim.mode == 'Normal' && editorTextFocus&&!inputFocus"
    },
    {
        "key": "shift-k",
        "command": "editor.action.moveLinesUpAction",
        "when": "vim.mode == 'VisualLine' && editorTextFocus"
    },
    {
        "key": "shift-j",
        "command": "editor.action.moveLinesDownAction",
        "when": "vim.mode == 'VisualLine' && editorTextFocus"
    },
    {
        "key": "shift-k",
        "command": "editor.action.showHover",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space c r",
        "command": "editor.action.rename",
        "when": "vim.mode == 'Normal' && editorTextFocus&&!inputFocus"
    },
    {
        "key": "space c s",
        "command": "workbench.action.gotoSymbol",
        "when": "vim.mode == 'Normal' && editorTextFocus&&!inputFocus"
    },
    {
        "key": "space b d",
        "command": "workbench.action.closeActiveEditor",
        "when": "(vim.mode == 'Normal' && editorTextFocus) || !inputFocus&&!inputFocus"
    },
    {
        "key": "space b o",
        "command": "workbench.action.closeOtherEditors",
        "when": "(vim.mode == 'Normal' && editorTextFocus) || !inputFocus&&!inputFocus"
    },
    {
        "key": "space space",
        "command": "workbench.action.quickOpen",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space g d",
        "command": "editor.action.revealDefinition",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space g r",
        "command": "editor.action.goToReferences",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space g i",
        "command": "editor.action.goToImplementation",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space s g",
        "command": "workbench.action.findInFiles",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
    },
    {
        "key": "space g g",
        "command": "runCommands",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)",
        "args": {
            "commands": [
                "workbench.view.scm",
                "workbench.scm.focus"
            ]
        }
    },
    {
        "key": "ctrl-n",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
    },
    // SUGGESTIONS AND AUTOCOMPLETION SHORTCUTS
    //
    {
        // "ctrl+j": Selects the next suggestion in the suggestions widget when it's visible
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        // "ctrl+k": Selects the previous suggestion in the suggestions widget when it's visible
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        // "ctrl+j": Selects the next item in the Quick Open dialog when it's open
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        // "ctrl+k": Selects the previous item in the Quick Open dialog when it's open
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    //
    // SEARCH AND NAVIGATION
    //
    {
        // "F4": Goes to next search result
        "key": "ctrl+j",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        // "shift+F4": Goes to previous search result
        "key": "ctrl+k",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    //
    // PROBLEM NAVIGATION
    //
    {
        // "F8": Goes to next problem (error, warning) in the editor
        "key": "ctrl+[",
        "command": "editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        // "shift+F8": Goes to previous problem in the editor
        "key": "ctrl+]",
        "command": "editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "space f",
        "command": "actions.find",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    //
    // FILE EXPLORER NAVIGATION SHORTCUTS
    //
    {
        // "ctrl+h": Collapses the selected folder in File Explorer when list is focused and not in input mode
        "key": "ctrl+k",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        // "ctrl+l": Expands the selected folder in File Explorer when list is focused and not in input mode
        "key": "ctrl+j",
        "command": "list.expand",
        "when": "listFocus && !inputFocus"
    },
    //
    // SPLIT MANAGEMENT
    //
    {
        // "alt+h": Decreases the width of the current editor group
        "key": "alt+h",
        "command": "workbench.action.decreaseViewWidth"
    },
    {
        // "alt+l": Increases the width of the current editor group
        "key": "alt+l",
        "command": "workbench.action.increaseViewWidth"
    },
    {
        // "ctrl+w m": Toggles maximizing the current editor group
        "key": "ctrl+w m",
        "command": "workbench.action.toggleMaximizeEditorGroup"
    },
    // TERMINAL SHORTCUTS
    //
    {
        "key": "ctrl+'",
        "command": "workbench.action.terminal.toggleTerminal",
    },
    {
        // "ctrl+;": Focuses the terminal when it's not currently focused
        "key": "ctrl+;",
        "command": "workbench.action.terminal.focus"
    },
    {
        // "ctrl+;": Focuses back to the active editor group when terminal is focused
        "key": "ctrl+;",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        // "ctrl+shift+;": Toggles terminal panel maximization and focuses on terminal
        "key": "ctrl+shift+;",
        "command": "multiCommand.toggleMaximizedPanelAndFocusTerminal",
        "when": "!terminalFocus || terminalFocus"
    },
    // Debug
    {
        "key": "space d s",
        "command": "workbench.action.debug.selectandstart",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && debuggersAvailable&&!inputFocus"
    },
    {
        "key": "space d d",
        "command": "workbench.action.debug.stop",
        "when": "vim.mode == 'Normal' && editorTextFocus && inDebugMode && !focusedSessionIsAttached&&!inputFocus"
    },
    {
        "key": "space d o",
        "command": "workbench.action.debug.stepOver",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && inDebugMode && debugState == 'stopped'&&!inputFocus"
    },
    {
        "key": "space d b",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space d e",
        "command": "editor.debug.action.showDebugHover",
        "when": "vim.mode == 'Normal' && editorTextFocus && inDebugMode && debugState == 'stopped'&&!inputFocus"
    },
    {
        "key": "space d c",
        "command": "workbench.action.debug.continue",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && inDebugMode && debugState == 'stopped'&&!inputFocus"
    },
    {
        "key": "ctrl+i",
        "command": "-workbench.action.chat.stopListeningAndSubmit",
        "when": "inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'view' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
    },
    {
        "key": "ctrl+i",
        "command": "-composer.startComposerPrompt"
    },
]